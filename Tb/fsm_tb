module router_fsm_tb;
reg clock,resetn,pkt_valid,fifo_full,fifo_empty_0,fifo_empty_1,fifo_empty_2,soft_reset_0,soft_reset_1,soft_reset_2,parity_done, low_packet_valid;
reg  [1:0] data_in;
wire write_enb_reg,detect_add,ld_state,laf_state,lfd_state,full_state,rst_int_reg,busy;

router_fsm dut(clock,resetn,pkt_valid,data_in,fifo_full,fifo_empty_0,fifo_empty_1,fifo_empty_2,soft_reset_0,soft_reset_1,soft_reset_2
       ,parity_done, low_packet_valid,write_enb_reg,detect_add,ld_state,laf_state,lfd_state,full_state,rst_int_reg,busy);
initial begin
clock=1;
forever #5 clock=~clock; end
task reset;
begin 
resetn=1'b0;
#10 resetn=1'b1;
end
endtask

task first;
begin
pkt_valid=1'b0; data_in=2'b00;
fifo_full=1'b0; 
fifo_empty_0=1'b1; fifo_empty_1=1'b1; fifo_empty_2=1'b1; 
soft_reset_0=1'b1; soft_reset_1=1'b0; soft_reset_2=1'b0;
parity_done =1'b1;  low_packet_valid=1'b1;
end
endtask

task third;
begin
pkt_valid=1'b1; data_in=2'b01;
fifo_full=1'b0; 
fifo_empty_0=1'b1; fifo_empty_1=1'b0; fifo_empty_2=1'b1; 
soft_reset_0=1'b1; soft_reset_1=1'b0; soft_reset_2=1'b0;
parity_done =1'b1;  low_packet_valid=1'b1;
end
endtask
task second;
begin
pkt_valid=1'b1; data_in=2'b10;
fifo_full=1'b0; 
fifo_empty_0=1'b0; fifo_empty_1=1'b0; fifo_empty_2=1'b1; 
soft_reset_0=1'b1; soft_reset_1=1'b0; soft_reset_2=1'b0;
parity_done =1'b1;  low_packet_valid=1'b1;
end
endtask

initial begin
reset;
#10;
first;
#20;
second;
#20;
third;
#20;
reset;
#10
$finish;
end
endmodule
